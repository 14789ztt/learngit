<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\ANO_PioneerPro_Ti.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\ANO_PioneerPro_Ti.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun Aug 04 00:09:14 2019
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Main_Task &rArr; Loop_Task_0 &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">NMI_Handler</a><BR>
 <LI><a href="#[f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">HardFault_Handler</a><BR>
 <LI><a href="#[10]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">MemManage_Handler</a><BR>
 <LI><a href="#[11]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">BusFault_Handler</a><BR>
 <LI><a href="#[12]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SVC_Handler</a><BR>
 <LI><a href="#[14]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DebugMon_Handler</a><BR>
 <LI><a href="#[15]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">PendSV_Handler</a><BR>
 <LI><a href="#[17]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">GPIOA_Handler</a><BR>
 <LI><a href="#[18]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">GPIOB_Handler</a><BR>
 <LI><a href="#[19]">GPIOC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">GPIOC_Handler</a><BR>
 <LI><a href="#[1a]">GPIOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">GPIOD_Handler</a><BR>
 <LI><a href="#[1b]">GPIOE_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">GPIOE_Handler</a><BR>
 <LI><a href="#[1c]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">UART0_Handler</a><BR>
 <LI><a href="#[1d]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">UART1_Handler</a><BR>
 <LI><a href="#[1e]">SSI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">SSI0_Handler</a><BR>
 <LI><a href="#[1f]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">I2C0_Handler</a><BR>
 <LI><a href="#[20]">PMW0_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">PMW0_FAULT_Handler</a><BR>
 <LI><a href="#[21]">PWM0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">PWM0_0_Handler</a><BR>
 <LI><a href="#[22]">PWM0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">PWM0_1_Handler</a><BR>
 <LI><a href="#[23]">PWM0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">PWM0_2_Handler</a><BR>
 <LI><a href="#[24]">QEI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">QEI0_Handler</a><BR>
 <LI><a href="#[25]">ADC0SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC0SS0_Handler</a><BR>
 <LI><a href="#[26]">ADC0SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC0SS1_Handler</a><BR>
 <LI><a href="#[27]">ADC0SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC0SS2_Handler</a><BR>
 <LI><a href="#[28]">ADC0SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC0SS3_Handler</a><BR>
 <LI><a href="#[29]">WDT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">WDT0_Handler</a><BR>
 <LI><a href="#[2a]">TIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">TIMER0A_Handler</a><BR>
 <LI><a href="#[2b]">TIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">TIMER0B_Handler</a><BR>
 <LI><a href="#[2c]">TIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">TIMER1A_Handler</a><BR>
 <LI><a href="#[2d]">TIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">TIMER1B_Handler</a><BR>
 <LI><a href="#[2e]">TIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">TIMER2A_Handler</a><BR>
 <LI><a href="#[2f]">TIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">TIMER2B_Handler</a><BR>
 <LI><a href="#[30]">COMP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">COMP0_Handler</a><BR>
 <LI><a href="#[31]">COMP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">COMP1_Handler</a><BR>
 <LI><a href="#[32]">COMP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">COMP2_Handler</a><BR>
 <LI><a href="#[33]">SYSCTL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">SYSCTL_Handler</a><BR>
 <LI><a href="#[34]">FLASH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">FLASH_Handler</a><BR>
 <LI><a href="#[35]">GPIOF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">GPIOF_Handler</a><BR>
 <LI><a href="#[36]">GPIOG_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">GPIOG_Handler</a><BR>
 <LI><a href="#[37]">GPIOH_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">GPIOH_Handler</a><BR>
 <LI><a href="#[38]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">UART2_Handler</a><BR>
 <LI><a href="#[39]">SSI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">SSI1_Handler</a><BR>
 <LI><a href="#[3a]">TIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">TIMER3A_Handler</a><BR>
 <LI><a href="#[3b]">TIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">TIMER3B_Handler</a><BR>
 <LI><a href="#[3c]">I2C1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">I2C1_Handler</a><BR>
 <LI><a href="#[3d]">QEI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">QEI1_Handler</a><BR>
 <LI><a href="#[3e]">CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">CAN0_Handler</a><BR>
 <LI><a href="#[3f]">CAN1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">CAN1_Handler</a><BR>
 <LI><a href="#[40]">CAN2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">CAN2_Handler</a><BR>
 <LI><a href="#[41]">HIB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">HIB_Handler</a><BR>
 <LI><a href="#[42]">USB0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">USB0_Handler</a><BR>
 <LI><a href="#[43]">PWM0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">PWM0_3_Handler</a><BR>
 <LI><a href="#[44]">UDMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">UDMA_Handler</a><BR>
 <LI><a href="#[45]">UDMAERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">UDMAERR_Handler</a><BR>
 <LI><a href="#[46]">ADC1SS0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">ADC1SS0_Handler</a><BR>
 <LI><a href="#[47]">ADC1SS1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">ADC1SS1_Handler</a><BR>
 <LI><a href="#[48]">ADC1SS2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">ADC1SS2_Handler</a><BR>
 <LI><a href="#[49]">ADC1SS3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">ADC1SS3_Handler</a><BR>
 <LI><a href="#[4a]">GPIOJ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">GPIOJ_Handler</a><BR>
 <LI><a href="#[4b]">GPIOK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">GPIOK_Handler</a><BR>
 <LI><a href="#[4c]">GPIOL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">GPIOL_Handler</a><BR>
 <LI><a href="#[4d]">SSI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4d]">SSI2_Handler</a><BR>
 <LI><a href="#[4e]">SSI3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">SSI3_Handler</a><BR>
 <LI><a href="#[4f]">UART3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4f]">UART3_Handler</a><BR>
 <LI><a href="#[50]">UART4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[50]">UART4_Handler</a><BR>
 <LI><a href="#[51]">UART5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">UART5_Handler</a><BR>
 <LI><a href="#[52]">UART6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">UART6_Handler</a><BR>
 <LI><a href="#[53]">UART7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">UART7_Handler</a><BR>
 <LI><a href="#[54]">I2C2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">I2C2_Handler</a><BR>
 <LI><a href="#[55]">I2C3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">I2C3_Handler</a><BR>
 <LI><a href="#[56]">TIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">TIMER4A_Handler</a><BR>
 <LI><a href="#[57]">TIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">TIMER4B_Handler</a><BR>
 <LI><a href="#[58]">TIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[58]">TIMER5A_Handler</a><BR>
 <LI><a href="#[59]">TIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">TIMER5B_Handler</a><BR>
 <LI><a href="#[5a]">WTIMER0A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5a]">WTIMER0A_Handler</a><BR>
 <LI><a href="#[5b]">WTIMER0B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5b]">WTIMER0B_Handler</a><BR>
 <LI><a href="#[5c]">WTIMER1A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">WTIMER1A_Handler</a><BR>
 <LI><a href="#[5d]">WTIMER1B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5d]">WTIMER1B_Handler</a><BR>
 <LI><a href="#[5e]">WTIMER2A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5e]">WTIMER2A_Handler</a><BR>
 <LI><a href="#[5f]">WTIMER2B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">WTIMER2B_Handler</a><BR>
 <LI><a href="#[60]">WTIMER3A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[60]">WTIMER3A_Handler</a><BR>
 <LI><a href="#[61]">WTIMER3B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">WTIMER3B_Handler</a><BR>
 <LI><a href="#[62]">WTIMER4A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">WTIMER4A_Handler</a><BR>
 <LI><a href="#[63]">WTIMER4B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">WTIMER4B_Handler</a><BR>
 <LI><a href="#[64]">WTIMER5A_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">WTIMER5A_Handler</a><BR>
 <LI><a href="#[65]">WTIMER5B_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[65]">WTIMER5B_Handler</a><BR>
 <LI><a href="#[66]">FPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">FPU_Handler</a><BR>
 <LI><a href="#[67]">I2C4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67]">I2C4_Handler</a><BR>
 <LI><a href="#[68]">I2C5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[68]">I2C5_Handler</a><BR>
 <LI><a href="#[69]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">GPIOM_Handler</a><BR>
 <LI><a href="#[6a]">GPION_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6a]">GPION_Handler</a><BR>
 <LI><a href="#[6b]">QEI2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">QEI2_Handler</a><BR>
 <LI><a href="#[6c]">GPIOP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">GPIOP0_Handler</a><BR>
 <LI><a href="#[6d]">GPIOP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">GPIOP1_Handler</a><BR>
 <LI><a href="#[6e]">GPIOP2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">GPIOP2_Handler</a><BR>
 <LI><a href="#[6f]">GPIOP3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">GPIOP3_Handler</a><BR>
 <LI><a href="#[70]">GPIOP4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">GPIOP4_Handler</a><BR>
 <LI><a href="#[71]">GPIOP5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">GPIOP5_Handler</a><BR>
 <LI><a href="#[72]">GPIOP6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">GPIOP6_Handler</a><BR>
 <LI><a href="#[73]">GPIOP7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">GPIOP7_Handler</a><BR>
 <LI><a href="#[74]">GPIOQ0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[74]">GPIOQ0_Handler</a><BR>
 <LI><a href="#[75]">GPIOQ1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">GPIOQ1_Handler</a><BR>
 <LI><a href="#[76]">GPIOQ2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[76]">GPIOQ2_Handler</a><BR>
 <LI><a href="#[77]">GPIOQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[77]">GPIOQ3_Handler</a><BR>
 <LI><a href="#[78]">GPIOQ4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[78]">GPIOQ4_Handler</a><BR>
 <LI><a href="#[79]">GPIOQ5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">GPIOQ5_Handler</a><BR>
 <LI><a href="#[7a]">GPIOQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">GPIOQ6_Handler</a><BR>
 <LI><a href="#[7b]">GPIOQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">GPIOQ7_Handler</a><BR>
 <LI><a href="#[7c]">GPIOR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7c]">GPIOR_Handler</a><BR>
 <LI><a href="#[7d]">GPIOS_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">GPIOS_Handler</a><BR>
 <LI><a href="#[7e]">PMW1_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7e]">PMW1_0_Handler</a><BR>
 <LI><a href="#[7f]">PWM1_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f]">PWM1_1_Handler</a><BR>
 <LI><a href="#[80]">PWM1_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">PWM1_2_Handler</a><BR>
 <LI><a href="#[81]">PWM1_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">PWM1_3_Handler</a><BR>
 <LI><a href="#[82]">PWM1_FAULT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">PWM1_FAULT_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[87]">ADC0Handler</a> from drv_adc.o(i.ADC0Handler) referenced from drv_adc.o(i.Drv_AdcInit)
 <LI><a href="#[25]">ADC0SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[26]">ADC0SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[27]">ADC0SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[28]">ADC0SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[46]">ADC1SS0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[47]">ADC1SS1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[48]">ADC1SS2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[49]">ADC1SS3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[11]">BusFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3e]">CAN0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3f]">CAN1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[40]">CAN2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[90]">CDCTickHandler</a> from usbdcdc.o(i.CDCTickHandler) referenced from usbdcdc.o(i.USBDCDCCompositeInit)
 <LI><a href="#[30]">COMP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[31]">COMP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[32]">COMP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5]">ControlHandler</a> from ano_usb.o(i.ControlHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[99]">DMAUSBIntHandler</a> from usbdma.o(i.DMAUSBIntHandler) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9b]">DMAUSBIntStatusClear</a> from usbdma.o(i.DMAUSBIntStatusClear) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9c]">DMAUSBStatus</a> from usbdma.o(i.DMAUSBStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[14]">DebugMon_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[88]">Drv_Icm20602IrqHandler</a> from drv_icm20602.o(i.Drv_Icm20602IrqHandler) referenced from drv_icm20602.o(i.Drv_Icm20602ReadyPinInit)
 <LI><a href="#[34]">FLASH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[66]">FPU_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[17]">GPIOA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[18]">GPIOB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[19]">GPIOC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1a]">GPIOD_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1b]">GPIOE_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[35]">GPIOF_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[36]">GPIOG_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[37]">GPIOH_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4a]">GPIOJ_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4b]">GPIOK_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4c]">GPIOL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[69]">GPIOM_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6a]">GPION_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6c]">GPIOP0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6d]">GPIOP1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6e]">GPIOP2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6f]">GPIOP3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[70]">GPIOP4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[71]">GPIOP5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[72]">GPIOP6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[73]">GPIOP7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[74]">GPIOQ0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[75]">GPIOQ1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[76]">GPIOQ2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[77]">GPIOQ3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[78]">GPIOQ4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[79]">GPIOQ5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7a]">GPIOQ6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7b]">GPIOQ7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7c]">GPIOR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7d]">GPIOS_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[41]">HIB_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[ab]">HandleConfigChange</a> from usbdcdc.o(i.HandleConfigChange) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[b1]">HandleDevice</a> from usbdcdc.o(i.HandleDevice) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[af]">HandleDisconnect</a> from usbdcdc.o(i.HandleDisconnect) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[ac]">HandleEP0Data</a> from usbdcdc.o(i.HandleEP0Data) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[b0]">HandleEndpoints</a> from usbdcdc.o(i.HandleEndpoints) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[aa]">HandleRequests</a> from usbdcdc.o(i.HandleRequests) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[ae]">HandleResume</a> from usbdcdc.o(i.HandleResume) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[ad]">HandleSuspend</a> from usbdcdc.o(i.HandleSuspend) referenced from usbdcdc.o(.constdata)
 <LI><a href="#[f]">HardFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1f]">I2C0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3c]">I2C1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[54]">I2C2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[55]">I2C3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[67]">I2C4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[68]">I2C5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[0]">Loop_Task_1</a> from ano_scheduler.o(i.Loop_Task_1) referenced 2 times from ano_scheduler.o(.data)
 <LI><a href="#[1]">Loop_Task_2</a> from ano_scheduler.o(i.Loop_Task_2) referenced 2 times from ano_scheduler.o(.data)
 <LI><a href="#[2]">Loop_Task_5</a> from ano_scheduler.o(i.Loop_Task_5) referenced 2 times from ano_scheduler.o(.data)
 <LI><a href="#[3]">Loop_Task_8</a> from ano_scheduler.o(i.Loop_Task_8) referenced 2 times from ano_scheduler.o(.data)
 <LI><a href="#[4]">Loop_Task_9</a> from ano_scheduler.o(i.Loop_Task_9) referenced 2 times from ano_scheduler.o(.data)
 <LI><a href="#[10]">MemManage_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[20]">PMW0_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7e]">PMW1_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[89]">PPM_Decode</a> from drv_rcin.o(i.PPM_Decode) referenced from drv_rcin.o(i.Drv_PpmInit)
 <LI><a href="#[21]">PWM0_0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[22]">PWM0_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[23]">PWM0_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[43]">PWM0_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7f]">PWM1_1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[80]">PWM1_2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[81]">PWM1_3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[82]">PWM1_FAULT_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[24]">QEI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3d]">QEI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6b]">QEI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[bd]">Reset_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[7]">RxHandler</a> from ano_usb.o(i.RxHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[1e]">SSI0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[39]">SSI1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4d]">SSI2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[4e]">SSI3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[13]">SVC_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[33]">SYSCTL_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8a]">Sbus_IRQHandler</a> from drv_rcin.o(i.Sbus_IRQHandler) referenced from drv_rcin.o(i.Drv_SbusInit)
 <LI><a href="#[16]">SysTick_Handler</a> from drv_bsp.o(i.SysTick_Handler) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[84]">SystemInit</a> from system_tm4c123.o(i.SystemInit) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[2a]">TIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2b]">TIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2c]">TIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2d]">TIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2e]">TIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[2f]">TIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3a]">TIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[3b]">TIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[56]">TIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[57]">TIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[58]">TIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[59]">TIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[a]">TxHandler</a> from ano_usb.o(i.TxHandler) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[1c]">UART0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[1d]">UART1_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8b]">UART1_IRQHandler</a> from drv_uart.o(i.UART1_IRQHandler) referenced from drv_uart.o(i.Drv_Uart1Init)
 <LI><a href="#[38]">UART2_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8c]">UART2_IRQHandler</a> from drv_uart.o(i.UART2_IRQHandler) referenced from drv_uart.o(i.Drv_Uart2Init)
 <LI><a href="#[4f]">UART3_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8d]">UART3_IRQHandler</a> from drv_uart.o(i.UART3_IRQHandler) referenced from drv_uart.o(i.Drv_Uart3Init)
 <LI><a href="#[50]">UART4_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8e]">UART4_IRQHandler</a> from drv_uart.o(i.UART4_IRQHandler) referenced from drv_uart.o(i.Drv_Uart4Init)
 <LI><a href="#[51]">UART5_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[8f]">UART5_IRQHandler</a> from drv_uart.o(i.UART5_IRQHandler) referenced from drv_uart.o(i.Drv_Uart5Init)
 <LI><a href="#[52]">UART6_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[53]">UART7_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[45]">UDMAERR_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[44]">UDMA_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[86]">USB0DeviceIntHandler</a> from usbdhandler.o(i.USB0DeviceIntHandler) referenced from ano_usb.o(i.AnoUsbCdcInit)
 <LI><a href="#[42]">USB0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[6]">USBBufferEventCallback</a> from usbbuffer.o(i.USBBufferEventCallback) referenced 4 times from usb_serial_structs.o(.data)
 <LI><a href="#[8]">USBDCDCPacketRead</a> from usbdcdc.o(i.USBDCDCPacketRead) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[b]">USBDCDCPacketWrite</a> from usbdcdc.o(i.USBDCDCPacketWrite) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[9]">USBDCDCRxPacketAvailable</a> from usbdcdc.o(i.USBDCDCRxPacketAvailable) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[c]">USBDCDCTxPacketAvailable</a> from usbdcdc.o(i.USBDCDCTxPacketAvailable) referenced 2 times from usb_serial_structs.o(.data)
 <LI><a href="#[b3]">USBDClearFeature</a> from usbdenum.o(i.USBDClearFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b8]">USBDGetConfiguration</a> from usbdenum.o(i.USBDGetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b6]">USBDGetDescriptor</a> from usbdenum.o(i.USBDGetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[ba]">USBDGetInterface</a> from usbdenum.o(i.USBDGetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b2]">USBDGetStatus</a> from usbdenum.o(i.USBDGetStatus) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b5]">USBDSetAddress</a> from usbdenum.o(i.USBDSetAddress) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b9]">USBDSetConfiguration</a> from usbdenum.o(i.USBDSetConfiguration) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b7]">USBDSetDescriptor</a> from usbdenum.o(i.USBDSetDescriptor) referenced from usbdenum.o(.constdata)
 <LI><a href="#[b4]">USBDSetFeature</a> from usbdenum.o(i.USBDSetFeature) referenced from usbdenum.o(.constdata)
 <LI><a href="#[bb]">USBDSetInterface</a> from usbdenum.o(i.USBDSetInterface) referenced from usbdenum.o(.constdata)
 <LI><a href="#[bc]">USBDSyncFrame</a> from usbdenum.o(i.USBDSyncFrame) referenced from usbdenum.o(.constdata)
 <LI><a href="#[12]">UsageFault_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[29]">WDT0_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5a]">WTIMER0A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5b]">WTIMER0B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5c]">WTIMER1A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5d]">WTIMER1B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5e]">WTIMER2A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[5f]">WTIMER2B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[60]">WTIMER3A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[61]">WTIMER3B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[62]">WTIMER4A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[63]">WTIMER4B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[64]">WTIMER5A_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[65]">WTIMER5B_Handler</a> from startup_tm4c123.o(.text) referenced from startup_tm4c123.o(RESET)
 <LI><a href="#[85]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tm4c123.o(.text)
 <LI><a href="#[9f]">iDMAUSBArbSizeSet</a> from usbdma.o(i.iDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a0]">iDMAUSBChannelAllocate</a> from usbdma.o(i.iDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a8]">iDMAUSBChannelDisable</a> from usbdma.o(i.iDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a7]">iDMAUSBChannelEnable</a> from usbdma.o(i.iDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a4]">iDMAUSBChannelIntDisable</a> from usbdma.o(i.iDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a3]">iDMAUSBChannelIntEnable</a> from usbdma.o(i.iDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a6]">iDMAUSBChannelRelease</a> from usbdma.o(i.iDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a1]">iDMAUSBChannelStatus</a> from usbdma.o(i.iDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a2]">iDMAUSBIntStatus</a> from usbdma.o(i.iDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a5]">iDMAUSBTransfer</a> from usbdma.o(i.iDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[a9]">iDMAUSBUnitSizeSet</a> from usbdma.o(i.iDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[83]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[91]">uDMAUSBArbSizeSet</a> from usbdma.o(i.uDMAUSBArbSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[92]">uDMAUSBChannelAllocate</a> from usbdma.o(i.uDMAUSBChannelAllocate) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[93]">uDMAUSBChannelDisable</a> from usbdma.o(i.uDMAUSBChannelDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[94]">uDMAUSBChannelEnable</a> from usbdma.o(i.uDMAUSBChannelEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[96]">uDMAUSBChannelIntDisable</a> from usbdma.o(i.uDMAUSBChannelIntDisable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[95]">uDMAUSBChannelIntEnable</a> from usbdma.o(i.uDMAUSBChannelIntEnable) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[97]">uDMAUSBChannelRelease</a> from usbdma.o(i.uDMAUSBChannelRelease) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[98]">uDMAUSBChannelStatus</a> from usbdma.o(i.uDMAUSBChannelStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9a]">uDMAUSBIntStatus</a> from usbdma.o(i.uDMAUSBIntStatus) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9d]">uDMAUSBTransfer</a> from usbdma.o(i.uDMAUSBTransfer) referenced from usbdma.o(i.USBLibDMAInit)
 <LI><a href="#[9e]">uDMAUSBUnitSizeSet</a> from usbdma.o(i.uDMAUSBUnitSizeSet) referenced from usbdma.o(i.USBLibDMAInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[be]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[22b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[22c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[22d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[22e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[22f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[18d]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[230]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[18f]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[231]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[232]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[233]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[bd]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))

<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIOC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIOE_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOE_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SSI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PMW0_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW0_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PWM0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>QEI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC0SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC0SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC0SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC0SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WDT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>COMP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>COMP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>COMP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SYSCTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>FLASH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPIOF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>GPIOG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOG_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>GPIOH_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOH_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SSI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>QEI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>HIB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HIB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USB0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PWM0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UDMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UDMAERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDMAERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ADC1SS0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC1SS1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ADC1SS2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC1SS3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1SS3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIOJ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOJ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIOK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIOL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SSI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SSI3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WTIMER0A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WTIMER0B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER0B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>WTIMER1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>WTIMER1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER1B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>WTIMER2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>WTIMER2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER2B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>WTIMER3A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>WTIMER3B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER3B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>WTIMER4A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>WTIMER4B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER4B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>WTIMER5A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>WTIMER5B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTIMER5B_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>FPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPION_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPION_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>QEI2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEI2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOP2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOP3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOP4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOP5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOP6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOP7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOP7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOQ0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOQ1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOQ2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>GPIOQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPIOQ4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>GPIOQ5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>GPIOQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>GPIOQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>GPIOR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>GPIOS_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOS_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>PMW1_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMW1_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>PWM1_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>PWM1_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>PWM1_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>PWM1_FAULT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tm4c123.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_FAULT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_PID_Init
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_data_analysis
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Handler
</UL>

<P><STRONG><a name="[c8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Handler
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_data_analysis
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Handler
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_data_analysis
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Handler
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[236]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[237]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[238]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[23a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[23b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>ADC0Handler</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, drv_adc.o(i.ADC0Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC0Handler &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(i.Drv_AdcInit)
</UL>
<P><STRONG><a name="[d0]"></a>ADCIntRegister</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, adc.o(i.ADCIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADCIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
</UL>

<P><STRONG><a name="[105]"></a>ANO_CBTracking_Ctrl</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ano_opmv_cbtracking_ctrl.o(i.ANO_CBTracking_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OPMV_Ctrl_Task
</UL>

<P><STRONG><a name="[d3]"></a>ANO_CBTracking_Task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ano_opmv_cbtracking_ctrl.o(i.ANO_CBTracking_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANO_CBTracking_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Decoupling
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Calcu
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[d6]"></a>ANO_DT_Data_Exchange</STRONG> (Thumb, 1192 bytes, Stack size 56 bytes, ano_dt.o(i.ANO_DT_Data_Exchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Version
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_VER
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_User
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Speed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_RCData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_MotoPWM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Location
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendSensorSta
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[e5]"></a>ANO_DT_Data_Receive_Anl</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Anl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_GetParame
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrlDataAnl
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>

<P><STRONG><a name="[e4]"></a>ANO_DT_Data_Receive_Anl_Task</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Anl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcRead
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Prepare_USB
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[1c0]"></a>ANO_DT_Data_Receive_Prepare</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>ANO_DT_Data_Receive_Prepare_USB</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_Data_Receive_Prepare_USB))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>

<P><STRONG><a name="[ec]"></a>ANO_DT_GetParame</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_GetParame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ANO_DT_GetParame
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_ParListToParUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[ef]"></a>ANO_DT_ParListToParUsed</STRONG> (Thumb, 1160 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_ParListToParUsed))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_GetParame
</UL>

<P><STRONG><a name="[f1]"></a>ANO_DT_ParUsedToParList</STRONG> (Thumb, 1226 bytes, Stack size 0 bytes, ano_dt.o(i.ANO_DT_ParUsedToParList))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
</UL>

<P><STRONG><a name="[eb]"></a>ANO_DT_SendCmd</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[d8]"></a>ANO_DT_SendParame</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_SendParame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ANO_DT_SendParame &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_ParUsedToParList
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[e1]"></a>ANO_DT_SendSensorSta</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_SendSensorSta))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ANO_DT_SendSensorSta &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[f2]"></a>ANO_DT_SendString</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thermostatic_Ctrl_Task
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write_task
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
</UL>

<P><STRONG><a name="[f0]"></a>ANO_DT_Send_Data</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2SendBuf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Version
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_VER
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_User
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Speed
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser2
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Senser
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_RCData
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Power
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_MotoPWM
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Location
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendSensorSta
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendParame
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
</UL>

<P><STRONG><a name="[e2]"></a>ANO_DT_Send_Location</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, ano_dt.o(i.ANO_DT_Send_Location))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ANO_DT_Send_Location &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[df]"></a>ANO_DT_Send_MotoPWM</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_MotoPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ANO_DT_Send_MotoPWM &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[e0]"></a>ANO_DT_Send_Power</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_Power))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ANO_DT_Send_Power &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[de]"></a>ANO_DT_Send_RCData</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_RCData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ANO_DT_Send_RCData &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[dc]"></a>ANO_DT_Send_Senser</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, ano_dt.o(i.ANO_DT_Send_Senser))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ANO_DT_Send_Senser &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[dd]"></a>ANO_DT_Send_Senser2</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_Senser2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ANO_DT_Send_Senser2 &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[da]"></a>ANO_DT_Send_Speed</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ANO_DT_Send_Speed &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[d9]"></a>ANO_DT_Send_Status</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, ano_dt.o(i.ANO_DT_Send_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ANO_DT_Send_Status &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[db]"></a>ANO_DT_Send_User</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, ano_dt.o(i.ANO_DT_Send_User))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ANO_DT_Send_User &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[e3]"></a>ANO_DT_Send_VER</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ano_dt.o(i.ANO_DT_Send_VER))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ANO_DT_Send_VER &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[d7]"></a>ANO_DT_Send_Version</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ano_dt.o(i.ANO_DT_Send_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ANO_DT_Send_Version &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>

<P><STRONG><a name="[f6]"></a>ANO_LT_StepProcedure</STRONG> (Thumb, 596 bytes, Stack size 0 bytes, ano_opmv_linetracking_ctrl.o(i.ANO_LT_StepProcedure))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Ctrl
</UL>

<P><STRONG><a name="[f5]"></a>ANO_LTracking_Ctrl</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, ano_opmv_linetracking_ctrl.o(i.ANO_LTracking_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANO_LTracking_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LT_StepProcedure
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OPMV_Ctrl_Task
</UL>

<P><STRONG><a name="[f7]"></a>ANO_LTracking_Task</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ano_opmv_linetracking_ctrl.o(i.ANO_LTracking_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANO_LTracking_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Decoupling
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Calcu
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[fa]"></a>ANO_OFDF_Task</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ano_of_decofusion.o(i.ANO_OFDF_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ANO_OFDF_Task &rArr; ANO_OF_Fusion
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF_State
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Fusion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Decouple
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[fe]"></a>ANO_OF_Data_Prepare_Task</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ano_of_decofusion.o(i.ANO_OF_Data_Prepare_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ANO_OF_Data_Prepare_Task &rArr; ANO_OF_Data_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF_INS_Get
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Data_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[104]"></a>ANO_OPMV_Ctrl_Task</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, ano_opmv_ctrl.o(i.ANO_OPMV_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ANO_OPMV_Ctrl_Task &rArr; Program_Ctrl_User_Set_HXYcmps &rArr; length_limit &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Ctrl
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_User_Set_YAWdps
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_User_Set_HXYcmps
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[e7]"></a>All_PID_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ano_flightctrl.o(i.All_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = All_PID_Init &rArr; Loc_1level_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_PID_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_PID_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_PID_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_PID_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[10d]"></a>Alt_1level_Ctrl</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, ano_altctrl.o(i.Alt_1level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Alt_1level_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[10a]"></a>Alt_1level_PID_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ano_altctrl.o(i.Alt_1level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[10f]"></a>Alt_2level_Ctrl</STRONG> (Thumb, 466 bytes, Stack size 16 bytes, ano_altctrl.o(i.Alt_2level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Alt_2level_Ctrl &rArr; Auto_Take_Off_Land_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Take_Off_Land_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[10b]"></a>Alt_2level_PID_Init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ano_altctrl.o(i.Alt_2level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[112]"></a>AnoOF_Check</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, ano_of.o(i.AnoOF_Check))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_DataAnl_Task
</UL>

<P><STRONG><a name="[114]"></a>AnoOF_DataAnl</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_DataAnl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnoOF_DataAnl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_GetOneByte
</UL>

<P><STRONG><a name="[111]"></a>AnoOF_DataAnl_Task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_DataAnl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnoOF_DataAnl_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[113]"></a>AnoOF_GetOneByte</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, ano_of.o(i.AnoOF_GetOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AnoOF_GetOneByte &rArr; AnoOF_DataAnl
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_DataAnl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>AnoUsbCdcInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ano_usb.o(i.AnoUsbCdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnoUsbCdcInit &rArr; USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBStackModeSet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[ed]"></a>AnoUsbCdcRead</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ano_usb.o(i.AnoUsbCdcRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnoUsbCdcRead &rArr; USBBufferRead &rArr; USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl_Task
</UL>

<P><STRONG><a name="[f3]"></a>AnoUsbCdcSend</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ano_usb.o(i.AnoUsbCdcSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>

<P><STRONG><a name="[11c]"></a>Ano_Parame_Read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ano_parameter.o(i.Ano_Parame_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Ano_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_ParamterRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Rest
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Data_Init
</UL>

<P><STRONG><a name="[122]"></a>Ano_Parame_Write_task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ano_parameter.o(i.Ano_Parame_Write_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Ano_Parame_Write_task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_9
</UL>

<P><STRONG><a name="[123]"></a>Ano_UWB_Data_Calcu_Task</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ano_uwb.o(i.Ano_UWB_Data_Calcu_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ano_UWB_Data_Calcu_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2w_2d_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[124]"></a>Att_1level_Ctrl</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, ano_attctrl.o(i.Att_1level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Att_1level_Ctrl &rArr; ctrl_parameter_change_task
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_1
</UL>

<P><STRONG><a name="[108]"></a>Att_1level_PID_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, ano_attctrl.o(i.Att_1level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[126]"></a>Att_2level_Ctrl</STRONG> (Thumb, 1474 bytes, Stack size 16 bytes, ano_attctrl.o(i.Att_2level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Att_2level_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_2
</UL>

<P><STRONG><a name="[109]"></a>Att_2level_PID_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, ano_attctrl.o(i.Att_2level_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
</UL>

<P><STRONG><a name="[110]"></a>Auto_Take_Off_Land_Task</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, ano_altctrl.o(i.Auto_Take_Off_Land_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Auto_Take_Off_Land_Task
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_take_off_task
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
</UL>

<P><STRONG><a name="[1b2]"></a>Center_Pos_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ano_sensor_basic.o(i.Center_Pos_Set))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Basic_Init
</UL>

<P><STRONG><a name="[5]"></a>ControlHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ano_usb.o(i.ControlHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ControlHandler &rArr; USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[15f]"></a>Drv_AK8975CSPinInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_ak8975.o(i.Drv_AK8975CSPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_AK8975CSPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SenserCsPinInit
</UL>

<P><STRONG><a name="[12c]"></a>Drv_AK8975_Read</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_ak8975.o(i.Drv_AK8975_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_AK8975_Read &rArr; ak8975_Trig &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_enable
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[1b3]"></a>Drv_Adc0Trigger</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_adc.o(i.Drv_Adc0Trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Adc0Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_UpdateTask
</UL>

<P><STRONG><a name="[130]"></a>Drv_AdcInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, drv_adc.o(i.Drv_AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_AdcInit &rArr; ADCIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[131]"></a>Drv_BspInit</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, drv_bsp.o(i.Drv_BspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Drv_BspInit &rArr; Para_Data_Init &rArr; Ano_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Basic_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Data_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_ParamterInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_LedInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart5Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart3Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmOutInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_OFInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Laser_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsPin_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AdcInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SenserCsPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>Drv_GpsGetOneByte</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drv_gps.o(i.Drv_GpsGetOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Drv_GpsGetOneByte &rArr; GPS_data_analysis &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_ubx_check_sum
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_data_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>Drv_GpsPin_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_gps.o(i.Drv_GpsPin_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Drv_GpsPin_Init &rArr; gps_config &rArr; UART_Write_D &rArr; Drv_Uart1SendBuf &rArr; Drv_Uart1TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_baudrate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[14c]"></a>Drv_HeatSet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_pwmout.o(i.Drv_HeatSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_HeatSet
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmOutInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_HeatingSet
</UL>

<P><STRONG><a name="[14b]"></a>Drv_HeatingSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_heating.o(i.Drv_HeatingSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_HeatingSet &rArr; Drv_HeatSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_HeatSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thermostatic_Ctrl_Task
</UL>

<P><STRONG><a name="[15e]"></a>Drv_Icm20602CSPinInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602CSPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Icm20602CSPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SenserCsPinInit
</UL>

<P><STRONG><a name="[139]"></a>Drv_Icm20602Init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Drv_Icm20602Init &rArr; icm20602_INT_Config &rArr; icm20602_setIntEnabled &rArr; icm20602_writeBit &rArr; icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writebyte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_INT_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[88]"></a>Drv_Icm20602IrqHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Drv_Icm20602IrqHandler &rArr; INT_1ms_Task &rArr; LED_1ms_DRV &rArr; Drv_LedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_1ms_Task
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_icm20602.o(i.Drv_Icm20602ReadyPinInit)
</UL>
<P><STRONG><a name="[152]"></a>Drv_Icm20602ReadyPinInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602ReadyPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Icm20602ReadyPinInit &rArr; GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_setIntEnabled
</UL>

<P><STRONG><a name="[155]"></a>Drv_Icm20602_Read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_icm20602.o(i.Drv_Icm20602_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Drv_Icm20602_Read &rArr; icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_Get_Data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[1c3]"></a>Drv_Laser_GetOneByte</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, drv_laser.o(i.Drv_Laser_GetOneByte))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>Drv_Laser_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_laser.o(i.Drv_Laser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Laser_Init &rArr; MyDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[16f]"></a>Drv_LedOnOff</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drv_led.o(i.Drv_LedOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_LedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_1ms_DRV
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_LedInit
</UL>

<P><STRONG><a name="[15a]"></a>Drv_MotorPWMSet</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, drv_pwmout.o(i.Drv_MotorPWMSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_MotorPWMSet
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Task
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PwmOutInit
</UL>

<P><STRONG><a name="[141]"></a>Drv_OFInit</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, drv_up_flow.o(i.Drv_OFInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Drv_OFInit &rArr; Drv_Uart4SendBuf &rArr; Drv_Uart4TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4SendBuf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[158]"></a>Drv_PpmInit</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, drv_rcin.o(i.Drv_PpmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_PpmInit &rArr; TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control_Init
</UL>

<P><STRONG><a name="[13b]"></a>Drv_PwmOutInit</STRONG> (Thumb, 676 bytes, Stack size 8 bytes, drv_pwmout.o(i.Drv_PwmOutInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_PwmOutInit &rArr; Drv_MotorPWMSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MotorPWMSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_HeatSet
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[160]"></a>Drv_SPL06CSPinInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_spl06.o(i.Drv_SPL06CSPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_SPL06CSPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SenserCsPinInit
</UL>

<P><STRONG><a name="[15b]"></a>Drv_SbusInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, drv_rcin.o(i.Drv_SbusInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_SbusInit &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Control_Init
</UL>

<P><STRONG><a name="[138]"></a>Drv_SenserCsPinInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_bsp.o(i.Drv_SenserCsPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_SenserCsPinInit &rArr; Drv_SPL06CSPinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SPL06CSPinInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602CSPinInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975CSPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[137]"></a>Drv_Spi0Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, drv_spi.o(i.Drv_Spi0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Spi0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[161]"></a>Drv_Spi0Receive</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_spi.o(i.Drv_Spi0Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
</UL>

<P><STRONG><a name="[12e]"></a>Drv_Spi0SingleWirteAndRead</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drv_spi.o(i.Drv_Spi0SingleWirteAndRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writebyte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0Receive
</UL>

<P><STRONG><a name="[13a]"></a>Drv_Spl0601Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, drv_spl06.o(i.Drv_Spl0601Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Spl0601Init &rArr; spl0601_rateset &rArr; spl0601_write &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[166]"></a>Drv_Spl0601_Read</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, drv_spl06.o(i.Drv_Spl0601_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Drv_Spl0601_Read &rArr; spl0601_get_temperature &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_temperature
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
</UL>

<P><STRONG><a name="[148]"></a>Drv_Uart1Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Uart1Init &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsPin_Init
</UL>

<P><STRONG><a name="[16b]"></a>Drv_Uart1SendBuf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart1SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Uart1SendBuf &rArr; Drv_Uart1TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write_D
</UL>

<P><STRONG><a name="[16c]"></a>Drv_Uart1TxCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.Drv_Uart1TxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Uart1TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1SendBuf
</UL>

<P><STRONG><a name="[132]"></a>Drv_Uart2Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Uart2Init &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[f4]"></a>Drv_Uart2SendBuf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart2SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Uart2SendBuf &rArr; Drv_Uart2TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Send_Data
</UL>

<P><STRONG><a name="[16d]"></a>Drv_Uart2TxCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.Drv_Uart2TxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Uart2TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2SendBuf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>Drv_Uart3Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Uart3Init &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[1c1]"></a>Drv_Uart3TxCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.Drv_Uart3TxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Uart3TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>Drv_Uart4Init</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Uart4Init &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[157]"></a>Drv_Uart4SendBuf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart4SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Drv_Uart4SendBuf &rArr; Drv_Uart4TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_OFInit
</UL>

<P><STRONG><a name="[16e]"></a>Drv_Uart4TxCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.Drv_Uart4TxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Uart4TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4SendBuf
</UL>

<P><STRONG><a name="[140]"></a>Drv_Uart5Init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, drv_uart.o(i.Drv_Uart5Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Drv_Uart5Init &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[1c4]"></a>Drv_Uart5TxCheck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.Drv_Uart5TxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Drv_Uart5TxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>Dvr_LedInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drv_led.o(i.Dvr_LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dvr_LedInit &rArr; Drv_LedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[133]"></a>Dvr_ParamterInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_paramter.o(i.Dvr_ParamterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dvr_ParamterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[11d]"></a>Dvr_ParamterRead</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_paramter.o(i.Dvr_ParamterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dvr_ParamterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
</UL>

<P><STRONG><a name="[121]"></a>Dvr_ParamterSave</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_paramter.o(i.Dvr_ParamterSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dvr_ParamterSave
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write
</UL>

<P><STRONG><a name="[170]"></a>Fc_Sensor_Get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ano_flightdatacal.o(i.Fc_Sensor_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Fc_Sensor_Get &rArr; Drv_Spl0601_Read &rArr; spl0601_get_temperature &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[171]"></a>Flight_Mode_Set</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ano_flightctrl.o(i.Flight_Mode_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flight_Mode_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Mode_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[173]"></a>Flight_State_Task</STRONG> (Thumb, 1196 bytes, Stack size 32 bytes, ano_flightctrl.o(i.Flight_State_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Flight_State_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;land_discriminat
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[ea]"></a>FlyCtrlDataAnl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ano_flyctrl.o(i.FlyCtrlDataAnl))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
</UL>

<P><STRONG><a name="[178]"></a>FlyCtrlReset</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ano_flyctrl.o(i.FlyCtrlReset))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
</UL>

<P><STRONG><a name="[177]"></a>FlyCtrl_Task</STRONG> (Thumb, 2022 bytes, Stack size 8 bytes, ano_flyctrl.o(i.FlyCtrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FlyCtrl_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w2h_2d_trans
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2w_2d_trans
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrlReset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_take_off
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_land
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[150]"></a>GPIOIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntClear))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602IrqHandler
</UL>

<P><STRONG><a name="[154]"></a>GPIOIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIOIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602ReadyPinInit
</UL>

<P><STRONG><a name="[153]"></a>GPIOIntRegister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gpio.o(i.GPIOIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIOIntNumberGet
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602ReadyPinInit
</UL>

<P><STRONG><a name="[19f]"></a>GPS_Data_Processing_Task</STRONG> (Thumb, 402 bytes, Stack size 0 bytes, drv_gps.o(i.GPS_Data_Processing_Task))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[146]"></a>GPS_data_analysis</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, drv_gps.o(i.GPS_data_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPS_data_analysis &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsGetOneByte
</UL>

<P><STRONG><a name="[145]"></a>GPS_ubx_check_sum</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, drv_gps.o(i.GPS_ubx_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPS_ubx_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsGetOneByte
</UL>

<P><STRONG><a name="[1ac]"></a>GetSysRunTimeUs</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_bsp.o(i.GetSysRunTimeUs))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[156]"></a>ICM_Get_Data</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, drv_icm20602.o(i.ICM_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ICM_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602_Read
</UL>

<P><STRONG><a name="[185]"></a>IMU_Update_Task</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ano_flightdatacal.o(i.IMU_Update_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = IMU_Update_Task &rArr; IMU_update &rArr; a2w_3d_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[186]"></a>IMU_update</STRONG> (Thumb, 2438 bytes, Stack size 72 bytes, ano_imu.o(i.IMU_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = IMU_update &rArr; a2w_3d_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w2h_2d_trans
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a2w_3d_trans
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_2_dot_product
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vec_2_cross_product
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt_reciprocal
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Update_Task
</UL>

<P><STRONG><a name="[151]"></a>INT_1ms_Task</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ano_scheduler.o(i.INT_1ms_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = INT_1ms_Task &rArr; LED_1ms_DRV &rArr; Drv_LedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_1ms_DRV
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602IrqHandler
</UL>

<P><STRONG><a name="[20e]"></a>IntDisable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[d2]"></a>IntEnable</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, interrupt.o(i.IntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[20d]"></a>IntIsEnabled</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, interrupt.o(i.IntIsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[18c]"></a>IntMasterDisable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[18e]"></a>IntMasterEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, interrupt.o(i.IntMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
</UL>

<P><STRONG><a name="[d1]"></a>IntRegister</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, interrupt.o(i.IntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntRegister
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntRegister
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIntRegister
</UL>

<P><STRONG><a name="[1d7]"></a>InternalUSBRegisterTickHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBRegisterTickHandler))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[1ff]"></a>InternalUSBStartOfFrameTick</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbtick.o(i.InternalUSBStartOfFrameTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = InternalUSBStartOfFrameTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[1d6]"></a>InternalUSBTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbtick.o(i.InternalUSBTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[18b]"></a>LED_1ms_DRV</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, ano_led.o(i.LED_1ms_DRV))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_1ms_DRV &rArr; Drv_LedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_LedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_1ms_Task
</UL>

<P><STRONG><a name="[190]"></a>LED_Task2</STRONG> (Thumb, 814 bytes, Stack size 16 bytes, ano_led.o(i.LED_Task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Task2 &rArr; ledFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOnOff
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledBreath
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[194]"></a>Loc_1level_Ctrl</STRONG> (Thumb, 3062 bytes, Stack size 48 bytes, ano_locctrl.o(i.Loc_1level_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Loc_1level_Ctrl &rArr; length_limit &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w2h_2d_trans
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2w_2d_trans
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_calculate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_PID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[10c]"></a>Loc_1level_PID_Init</STRONG> (Thumb, 364 bytes, Stack size 8 bytes, ano_locctrl.o(i.Loc_1level_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Loc_1level_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
</UL>

<P><STRONG><a name="[1a4]"></a>MPU6050_Data_Offset</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, ano_sensor_basic.o(i.MPU6050_Data_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU6050_Data_Offset
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[1a5]"></a>Mag_Data_Deal_Task</STRONG> (Thumb, 920 bytes, Stack size 32 bytes, ano_magprocess.o(i.Mag_Data_Deal_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Mag_Data_Deal_Task &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_save
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_Z
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_XY
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Cal_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
</UL>

<P><STRONG><a name="[1aa]"></a>Mag_Get</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, drv_ak8975.o(i.Mag_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mag_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
</UL>

<P><STRONG><a name="[1a0]"></a>Mag_Update_Task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ano_flightdatacal.o(i.Mag_Update_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Mag_Update_Task &rArr; Mag_Data_Deal_Task &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Get
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[1ab]"></a>Main_Task</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ano_scheduler.o(i.Main_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Main_Task &rArr; Loop_Task_0 &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunTimeUs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>Motor_Ctrl_Task</STRONG> (Thumb, 528 bytes, Stack size 16 bytes, ano_motorctrl.o(i.Motor_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_Ctrl_Task &rArr; Drv_MotorPWMSet
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_MotorPWMSet
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_1
</UL>

<P><STRONG><a name="[147]"></a>MyDelayMs</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_bsp.o(i.MyDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_OFInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Laser_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsPin_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_baudrate_config
</UL>

<P><STRONG><a name="[1c2]"></a>OFGetByte</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, drv_up_flow.o(i.OFGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OFGetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>OpenMV_Byte_Get</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, drv_openmv.o(i.OpenMV_Byte_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OpenMV_Byte_Get &rArr; OpenMV_Data_Analysis
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Data_Analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>OpenMV_Offline_Check</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_openmv.o(i.OpenMV_Offline_Check))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[e6]"></a>PID_Rest</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, ano_parameter.o(i.PID_Rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PID_Rest &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
</UL>

<P><STRONG><a name="[10e]"></a>PID_calculate</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, ano_pid.o(i.PID_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_Ctrl
</UL>

<P><STRONG><a name="[134]"></a>Para_Data_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ano_fcdata.o(i.Para_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Para_Data_Init &rArr; Ano_Parame_Read &rArr; Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[e9]"></a>Parame_Reset</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, ano_parameter.o(i.Parame_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Parame_Reset &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Para2fc
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
</UL>

<P><STRONG><a name="[1a2]"></a>Power_UpdateTask</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, ano_power.o(i.Power_UpdateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power_UpdateTask &rArr; Drv_Adc0Trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Adc0Trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_9
</UL>

<P><STRONG><a name="[180]"></a>ProcessDataFromHost</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataFromHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataFromHost
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[181]"></a>ProcessDataToHost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdc.o(i.ProcessDataToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProcessDataToHost
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[106]"></a>Program_Ctrl_User_Set_HXYcmps</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ano_programctrl_user.o(i.Program_Ctrl_User_Set_HXYcmps))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Program_Ctrl_User_Set_HXYcmps &rArr; length_limit &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OPMV_Ctrl_Task
</UL>

<P><STRONG><a name="[107]"></a>Program_Ctrl_User_Set_YAWdps</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ano_programctrl_user.o(i.Program_Ctrl_User_Set_YAWdps))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OPMV_Ctrl_Task
</UL>

<P><STRONG><a name="[19d]"></a>RC_duty_task</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, ano_rc.o(i.RC_duty_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RC_duty_task &rArr; unlock &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_watch_dog
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[136]"></a>Remote_Control_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ano_rc.o(i.Remote_Control_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Remote_Control_Init &rArr; Drv_SbusInit &rArr; UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SbusInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PpmInit
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[7]"></a>RxHandler</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, ano_usb.o(i.RxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>Sensor_Basic_Init</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, ano_sensor_basic.o(i.Sensor_Basic_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sensor_Basic_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Center_Pos_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[197]"></a>Sensor_Data_Prepare</STRONG> (Thumb, 924 bytes, Stack size 16 bytes, ano_sensor_basic.o(i.Sensor_Data_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Sensor_Data_Prepare &rArr; mpu_auto_az &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_auto_az
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motionless_check
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Data_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[207]"></a>Set_Att_1level_Ki</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ano_attctrl.o(i.Set_Att_1level_Ki))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
</UL>

<P><STRONG><a name="[208]"></a>Set_Att_2level_Ki</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ano_attctrl.o(i.Set_Att_2level_Ki))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_parameter_change_task
</UL>

<P><STRONG><a name="[19a]"></a>Swtich_State_Task</STRONG> (Thumb, 346 bytes, Stack size 0 bytes, ano_flightctrl.o(i.Swtich_State_Task))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[15c]"></a>SysCtlClockGet</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, sysctl.o(i.SysCtlClockGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SbusInit
</UL>

<P><STRONG><a name="[1e1]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlPeripheralEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e0]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, sysctl.o(i.SysCtlPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e2]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(i.SysCtlUSBPLLEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_bsp.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>SysTick_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_bsp.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>

<P><STRONG><a name="[84]"></a>SystemInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, system_tm4c123.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>Thermostatic_Ctrl_Task</STRONG> (Thumb, 554 bytes, Stack size 8 bytes, drv_heating.o(i.Thermostatic_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Thermostatic_Ctrl_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_HeatingSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_9
</UL>

<P><STRONG><a name="[159]"></a>TimerIntRegister</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, timer.o(i.TimerIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_PpmInit
</UL>

<P><STRONG><a name="[a]"></a>TxHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ano_usb.o(i.TxHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>UART1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART1_IRQHandler &rArr; Drv_GpsGetOneByte &rArr; GPS_data_analysis &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsGetOneByte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1TxCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.Drv_Uart1Init)
</UL>
<P><STRONG><a name="[8c]"></a>UART2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; Drv_Uart2TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Prepare
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2TxCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.Drv_Uart2Init)
</UL>
<P><STRONG><a name="[8d]"></a>UART3_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART3_IRQHandler &rArr; OpenMV_Byte_Get &rArr; OpenMV_Data_Analysis
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Byte_Get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart3TxCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.Drv_Uart3Init)
</UL>
<P><STRONG><a name="[8e]"></a>UART4_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, drv_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; AnoOF_GetOneByte &rArr; AnoOF_DataAnl
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFGetByte
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_GetOneByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4TxCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.Drv_Uart4Init)
</UL>
<P><STRONG><a name="[8f]"></a>UART5_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, drv_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; Drv_Uart5TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Laser_GetOneByte
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart5TxCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.Drv_Uart5Init)
</UL>
<P><STRONG><a name="[15d]"></a>UARTIntRegister</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart.o(i.UARTIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_SbusInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart5Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart4Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart3Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart2Init
</UL>

<P><STRONG><a name="[1c6]"></a>ULPIConfigSet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbulpi.o(i.ULPIConfigSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegWrite
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[86]"></a>USB0DeviceIntHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdhandler.o(i.USB0DeviceIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB0DeviceIntHandler &rArr; USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_usb.o(i.AnoUsbCdcInit)
</UL>
<P><STRONG><a name="[6]"></a>USBBufferEventCallback</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferEventCallback &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigFree
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceWrite
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufAdvanceRead
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>USBBufferFlush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbbuffer.o(i.USBBufferFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBBufferFlush &rArr; USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlHandler
</UL>

<P><STRONG><a name="[116]"></a>USBBufferInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbbuffer.o(i.USBBufferInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBBufferInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[11a]"></a>USBBufferRead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbbuffer.o(i.USBBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferRead &rArr; USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcRead
</UL>

<P><STRONG><a name="[11b]"></a>USBBufferWrite</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbbuffer.o(i.USBBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufWrite
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufFree
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcSend
</UL>

<P><STRONG><a name="[1e3]"></a>USBClockEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBClockEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[202]"></a>USBControllerVersion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBControllerVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
</UL>

<P><STRONG><a name="[1d3]"></a>USBDCDCCompositeInit</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdcdc.o(i.USBDCDCCompositeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDCDCCompositeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDFeatureGet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDDeviceInfoInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBRegisterTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[118]"></a>USBDCDCInit</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBDCDCInit &rArr; USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[8]"></a>USBDCDCPacketRead</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, usbdcdc.o(i.USBDCDCPacketRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDCDCPacketRead &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBDCDCPacketWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, usbdcdc.o(i.USBDCDCPacketWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDCPacketWrite &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>USBDCDCRxPacketAvailable</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbdcdc.o(i.USBDCDCRxPacketAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDCRxPacketAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBDCDCTxPacketAvailable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbdcdc.o(i.USBDCDCTxPacketAvailable))
<BR>[Address Reference Count : 1]<UL><LI> usb_serial_structs.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>USBDCDConfigDescGet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigDescGet &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[1dd]"></a>USBDCDConfigDescGetNum</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, usbdcdesc.o(i.USBDCDConfigDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDCDConfigDescGetNum &rArr; USBDescGetNum
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[1f5]"></a>USBDCDConfigDescGetSize</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbdcdesc.o(i.USBDCDConfigDescGetSize))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
</UL>

<P><STRONG><a name="[1de]"></a>USBDCDConfigGetInterface</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, usbdcdesc.o(i.USBDCDConfigGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGetNum
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[1df]"></a>USBDCDConfigGetInterfaceEndpoint</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, usbdcdesc.o(i.USBDCDConfigGetInterfaceEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[1d5]"></a>USBDCDDeviceInfoInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDDeviceInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[1d4]"></a>USBDCDFeatureGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDFeatureGet))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCCompositeInit
</UL>

<P><STRONG><a name="[1d8]"></a>USBDCDInit</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, usbdenum.o(i.USBDCDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBDCDInit &rArr; ULPIConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlUSBPLLEnable
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBTickInit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIEnable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBULPIDisable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBOTGMode
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntEnable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusControl
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableEndpoint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntEnableControl
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevMode
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMDisable
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMConfig
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevConnect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBClockEnable
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLibDMAInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCInit
</UL>

<P><STRONG><a name="[182]"></a>USBDCDRequestDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDRequestDataEP0))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[184]"></a>USBDCDSendDataEP0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdenum.o(i.USBDCDSendDataEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
</UL>

<P><STRONG><a name="[17c]"></a>USBDCDStallEP0</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbdenum.o(i.USBDCDStallEP0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEP0Data
</UL>

<P><STRONG><a name="[213]"></a>USBDMAChannelAddressSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelAddressSet))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[217]"></a>USBDMAChannelConfigSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[214]"></a>USBDMAChannelCountSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[20b]"></a>USBDMAChannelDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelRelease
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[210]"></a>USBDMAChannelEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[20c]"></a>USBDMAChannelIntDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntDisable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[20f]"></a>USBDMAChannelIntEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelIntEnable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[212]"></a>USBDMAChannelIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBIntStatus
</UL>

<P><STRONG><a name="[211]"></a>USBDMAChannelStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDMAChannelStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBChannelStatus
</UL>

<P><STRONG><a name="[1dc]"></a>USBDescGet</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbdesc.o(i.USBDescGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBDescGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
</UL>

<P><STRONG><a name="[1db]"></a>USBDescGetNum</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbdesc.o(i.USBDescGetNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>

<P><STRONG><a name="[1fc]"></a>USBDevAddrSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb.o(i.USBDevAddrSet))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[1f0]"></a>USBDevConnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1fe]"></a>USBDevDisconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBDevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[1f9]"></a>USBDevEndpointConfigSet</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[183]"></a>USBDevEndpointDataAck</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointDataAck))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetAddress
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[1f2]"></a>USBDevEndpointStall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStall))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSyncFrame
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetFeature
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetDescriptor
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[1f3]"></a>USBDevEndpointStallClear</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStallClear))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClearFeature
</UL>

<P><STRONG><a name="[17e]"></a>USBDevEndpointStatusClear</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, usb.o(i.USBDevEndpointStatusClear))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[1e8]"></a>USBDevLPMConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1eb]"></a>USBDevLPMDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1ea]"></a>USBDevLPMEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBDevLPMEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e7]"></a>USBDevMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBDevMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1f7]"></a>USBDeviceConfig</STRONG> (Thumb, 410 bytes, Stack size 112 bytes, usbdconfig.o(i.USBDeviceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOConfigSet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetConfiguration
</UL>

<P><STRONG><a name="[1f8]"></a>USBDeviceConfigAlternate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usbdconfig.o(i.USBDeviceConfigAlternate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointConfigSet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterfaceEndpoint
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDSetInterface
</UL>

<P><STRONG><a name="[1fb]"></a>USBDeviceEnumHandler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, usbdenum.o(i.USBDeviceEnumHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevAddrSet
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[1ca]"></a>USBDeviceIntHandlerInternal</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, usbdenum.o(i.USBDeviceIntHandlerInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USBDeviceIntHandlerInternal &rArr; USBDeviceEnumHandler &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPMIntStatus
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBIntStatusEndpoint
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevLPMEnable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevDisconnect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalUSBStartOfFrameTick
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
</UL>

<P><STRONG><a name="[1fd]"></a>USBDeviceResumeTickHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbdenum.o(i.USBDeviceResumeTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDeviceResumeTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHostResume
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[223]"></a>USBEndpointDMAChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAChannel))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[216]"></a>USBEndpointDMAConfigSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[219]"></a>USBEndpointDMADisable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMADisable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[218]"></a>USBEndpointDMAEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[12a]"></a>USBEndpointDataAvail</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataAvail))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[1d9]"></a>USBEndpointDataGet</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDReadAndDispatchRequest
</UL>

<P><STRONG><a name="[1bd]"></a>USBEndpointDataPut</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, usb.o(i.USBEndpointDataPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[1b4]"></a>USBEndpointDataSend</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb.o(i.USBEndpointDataSend))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketWrite
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>

<P><STRONG><a name="[215]"></a>USBEndpointPacketCountSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBEndpointPacketCountSet))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDMAUSBTransfer
</UL>

<P><STRONG><a name="[17d]"></a>USBEndpointStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb.o(i.USBEndpointStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCRxPacketAvailable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDCPacketRead
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[228]"></a>USBFIFOAddrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBFIFOAddrGet))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[1fa]"></a>USBFIFOConfigSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usb.o(i.USBFIFOConfigSet))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>

<P><STRONG><a name="[201]"></a>USBHostResume</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb.o(i.USBHostResume))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceResumeTickHandler
</UL>

<P><STRONG><a name="[1ee]"></a>USBIntEnableControl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableControl))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1ef]"></a>USBIntEnableEndpoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb.o(i.USBIntEnableEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[119]"></a>USBIntRegister</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb.o(i.USBIntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBIntRegister &rArr; IntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[1c9]"></a>USBIntStatusControl</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusControl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB0DeviceIntHandler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1ed]"></a>USBIntStatusEndpoint</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usb.o(i.USBIntStatusEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e9]"></a>USBLPMIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[200]"></a>USBLPMIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb.o(i.USBLPMIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceIntHandlerInternal
</UL>

<P><STRONG><a name="[1ec]"></a>USBLibDMAInit</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, usbdma.o(i.USBLibDMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBLibDMAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBControllerVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e6]"></a>USBOTGMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb.o(i.USBOTGMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1cf]"></a>USBRingBufAdvanceRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbringbuf.o(i.USBRingBufAdvanceRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBRingBufAdvanceRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[1cb]"></a>USBRingBufAdvanceWrite</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufAdvanceWrite))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[1ce]"></a>USBRingBufContigFree</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigFree))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
</UL>

<P><STRONG><a name="[1bb]"></a>USBRingBufContigUsed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufContigUsed))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[1d0]"></a>USBRingBufFlush</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbringbuf.o(i.USBRingBufFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBRingBufFlush &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferFlush
</UL>

<P><STRONG><a name="[1cc]"></a>USBRingBufFree</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufFree))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[1d1]"></a>USBRingBufInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufInit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferInit
</UL>

<P><STRONG><a name="[1d2]"></a>USBRingBufRead</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, usbringbuf.o(i.USBRingBufRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBRingBufRead &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
</UL>

<P><STRONG><a name="[1bc]"></a>USBRingBufUsed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbringbuf.o(i.USBRingBufUsed))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferRead
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleNextTransmission
</UL>

<P><STRONG><a name="[1cd]"></a>USBRingBufWrite</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usbringbuf.o(i.USBRingBufWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[117]"></a>USBStackModeSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbmode.o(i.USBStackModeSet))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoUsbCdcInit
</UL>

<P><STRONG><a name="[1e5]"></a>USBULPIDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIDisable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1e4]"></a>USBULPIEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb.o(i.USBULPIEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDInit
</UL>

<P><STRONG><a name="[1c7]"></a>USBULPIRegRead</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegRead))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[1c8]"></a>USBULPIRegWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb.o(i.USBULPIRegWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULPIConfigSet
</UL>

<P><STRONG><a name="[199]"></a>WCXY_Acc_Get_Task</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, drv_gps.o(i.WCXY_Acc_Get_Task))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[198]"></a>WCZ_Acc_Get_Task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ano_flightdatacal.o(i.WCZ_Acc_Get_Task))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_0
</UL>

<P><STRONG><a name="[203]"></a>WCZ_Data_Calc</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, ano_motioncal.o(i.WCZ_Data_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WCZ_Data_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_deadzone
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inte_fix_filter
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inte_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Fus_Task
</UL>

<P><STRONG><a name="[176]"></a>WCZ_Data_Reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ano_motioncal.o(i.WCZ_Data_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
</UL>

<P><STRONG><a name="[19e]"></a>WCZ_Fus_Task</STRONG> (Thumb, 432 bytes, Stack size 8 bytes, ano_flightdatacal.o(i.WCZ_Fus_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WCZ_Fus_Task &rArr; WCZ_Data_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_5
</UL>

<P><STRONG><a name="[23e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[23f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[240]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[188]"></a>a2w_3d_trans</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, ano_imu.o(i.a2w_3d_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a2w_3d_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[19c]"></a>calculate_RPY</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, ano_imu.o(i.calculate_RPY))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = calculate_RPY &rArr; fast_atan2
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_2
</UL>

<P><STRONG><a name="[1b1]"></a>ch_watch_dog_feed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ano_rc.o(i.ch_watch_dog_feed))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Decode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Cal
</UL>

<P><STRONG><a name="[125]"></a>ctrl_parameter_change_task</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ano_flightctrl.o(i.ctrl_parameter_change_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ctrl_parameter_change_task
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Att_2level_Ki
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Att_1level_Ki
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
</UL>

<P><STRONG><a name="[e8]"></a>data_save</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ano_fcdata.o(i.data_save))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_GetParame
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Receive_Anl
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_Data_Offset
</UL>

<P><STRONG><a name="[209]"></a>fail_safe</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ano_rc.o(i.fail_safe))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe_check
</UL>

<P><STRONG><a name="[1b8]"></a>fail_safe_check</STRONG> (Thumb, 166 bytes, Stack size 4 bytes, ano_rc.o(i.fail_safe_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fail_safe_check
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fail_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[206]"></a>fast_atan2</STRONG> (Thumb, 350 bytes, Stack size 4 bytes, ano_math.o(i.fast_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fast_atan2
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
</UL>

<P><STRONG><a name="[205]"></a>fix_inte_filter</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ano_filter.o(i.fix_inte_filter))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[149]"></a>gps_baudrate_config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_gps.o(i.gps_baudrate_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gps_baudrate_config &rArr; UART_Write_D &rArr; Drv_Uart1SendBuf &rArr; Drv_Uart1TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write_D
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsPin_Init
</UL>

<P><STRONG><a name="[14a]"></a>gps_config</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_gps.o(i.gps_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gps_config &rArr; UART_Write_D &rArr; Drv_Uart1SendBuf &rArr; Drv_Uart1TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write_D
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyDelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_GpsPin_Init
</UL>

<P><STRONG><a name="[101]"></a>h2w_2d_trans</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ano_imu.o(i.h2w_2d_trans))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_UWB_Data_Calcu_Task
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Fusion
</UL>

<P><STRONG><a name="[204]"></a>inte_fix_filter</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, ano_filter.o(i.inte_fix_filter))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[175]"></a>land_discriminat</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, ano_flightctrl.o(i.land_discriminat))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
</UL>

<P><STRONG><a name="[174]"></a>length_limit</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ano_math.o(i.length_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = length_limit &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Ctrl_User_Set_HXYcmps
</UL>

<P><STRONG><a name="[83]"></a>main</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; Main_Task &rArr; Loop_Task_0 &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_BspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1be]"></a>motionless_check</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, ano_sensor_basic.o(i.motionless_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motionless_check
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[1bf]"></a>mpu_auto_az</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ano_sensor_basic.o(i.mpu_auto_az))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpu_auto_az &rArr; my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
</UL>

<P><STRONG><a name="[20a]"></a>my_abs</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ano_math.o(i.my_abs))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_atan2
</UL>

<P><STRONG><a name="[127]"></a>my_deadzone</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ano_math.o(i.my_deadzone))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Data_Calc
</UL>

<P><STRONG><a name="[1a9]"></a>my_sqrt</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ano_math.o(i.my_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = my_sqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt_reciprocal
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;length_limit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_auto_az
</UL>

<P><STRONG><a name="[187]"></a>my_sqrt_reciprocal</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ano_math.o(i.my_sqrt_reciprocal))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_sqrt
</UL>

<P><STRONG><a name="[17a]"></a>one_key_land</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ano_flightctrl.o(i.one_key_land))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[179]"></a>one_key_take_off</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ano_flightctrl.o(i.one_key_take_off))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Task_8
</UL>

<P><STRONG><a name="[128]"></a>one_key_take_off_task</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ano_flightctrl.o(i.one_key_take_off_task))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_Take_Off_Land_Task
</UL>

<P><STRONG><a name="[163]"></a>spl0601_get_calib_param</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spl0601_get_calib_param &rArr; spl0601_read &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601Init
</UL>

<P><STRONG><a name="[16a]"></a>spl0601_get_pressure</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, drv_spl06.o(i.spl0601_get_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[169]"></a>spl0601_get_raw_pressure</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_get_raw_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_get_raw_pressure &rArr; spl0601_read &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[167]"></a>spl0601_get_raw_temp</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_get_raw_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_get_raw_temp &rArr; spl0601_read &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[168]"></a>spl0601_get_temperature</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, drv_spl06.o(i.spl0601_get_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spl0601_get_temperature &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601_Read
</UL>

<P><STRONG><a name="[164]"></a>spl0601_rateset</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, drv_spl06.o(i.spl0601_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spl0601_rateset &rArr; spl0601_write &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601Init
</UL>

<P><STRONG><a name="[165]"></a>spl0601_start_continuous</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_spl06.o(i.spl0601_start_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spl0601_start_continuous &rArr; spl0601_write &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601Init
</UL>

<P><STRONG><a name="[1b6]"></a>stick_function</STRONG> (Thumb, 332 bytes, Stack size 20 bytes, ano_rc.o(i.stick_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stick_function &rArr; stick_function_check
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check_longpress
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[221]"></a>stick_function_check</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, ano_rc.o(i.stick_function_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stick_function_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
</UL>

<P><STRONG><a name="[220]"></a>stick_function_check_longpress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ano_rc.o(i.stick_function_check_longpress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = stick_function_check_longpress
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function
</UL>

<P><STRONG><a name="[224]"></a>uDMAChannelAttributeDisable</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelAttributeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelRelease
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
</UL>

<P><STRONG><a name="[222]"></a>uDMAChannelControlSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelControlSet))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBUnitSizeSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelAllocate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBArbSizeSet
</UL>

<P><STRONG><a name="[225]"></a>uDMAChannelDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelDisable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelDisable
</UL>

<P><STRONG><a name="[226]"></a>uDMAChannelEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>

<P><STRONG><a name="[227]"></a>uDMAChannelModeGet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, udma.o(i.uDMAChannelModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBIntStatus
</UL>

<P><STRONG><a name="[229]"></a>uDMAChannelTransferSet</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, udma.o(i.uDMAChannelTransferSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAChannelTransferSet
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>

<P><STRONG><a name="[1b5]"></a>unlock</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, ano_rc.o(i.unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = unlock &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_SendString
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stick_function_check_longpress
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[189]"></a>vec_2_cross_product</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ano_math.o(i.vec_2_cross_product))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[18a]"></a>vec_2_dot_product</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ano_math.o(i.vec_2_dot_product))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>

<P><STRONG><a name="[103]"></a>w2h_2d_trans</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ano_imu.o(i.w2h_2d_trans))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Fusion
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_update
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[196]"></a>Loop_Task_0</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ano_scheduler.o(i.Loop_Task_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Loop_Task_0 &rArr; ANO_DT_Data_Exchange &rArr; ANO_DT_Data_Receive_Anl_Task &rArr; ANO_DT_Data_Receive_Anl &rArr; ANO_DT_SendCmd &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Acc_Get_Task
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCXY_Acc_Get_Task
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtich_State_Task
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Prepare
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Update_Task
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_State_Task
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fc_Sensor_Get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Data_Prepare_Task
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_DT_Data_Exchange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Task
</UL>

<P><STRONG><a name="[0]"></a>Loop_Task_1</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ano_scheduler.o(i.Loop_Task_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Loop_Task_1 &rArr; Motor_Ctrl_Task &rArr; Drv_MotorPWMSet
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ctrl_Task
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_1level_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_scheduler.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Loop_Task_2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ano_scheduler.o(i.Loop_Task_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Loop_Task_2 &rArr; calculate_RPY &rArr; fast_atan2
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_RPY
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_2level_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_scheduler.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Loop_Task_5</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ano_scheduler.o(i.Loop_Task_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Loop_Task_5 &rArr; RC_duty_task &rArr; unlock &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WCZ_Fus_Task
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task2
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Data_Processing_Task
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Mode_Set
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnoOF_DataAnl_Task
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_2level_Ctrl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alt_1level_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_scheduler.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Loop_Task_8</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ano_scheduler.o(i.Loop_Task_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Loop_Task_8 &rArr; FlyCtrl_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_take_off
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;one_key_land
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Offline_Check
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Update_Task
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loc_1level_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlyCtrl_Task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_UWB_Data_Calcu_Task
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OPMV_Ctrl_Task
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OFDF_Task
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Task
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_scheduler.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Loop_Task_9</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ano_scheduler.o(i.Loop_Task_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Loop_Task_9 &rArr; Thermostatic_Ctrl_Task &rArr; ANO_DT_SendString &rArr; ANO_DT_Send_Data &rArr; AnoUsbCdcSend &rArr; USBBufferWrite &rArr; USBRingBufWrite &rArr; IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thermostatic_Ctrl_Task
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_UpdateTask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano_scheduler.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>Ano_Parame_Write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ano_parameter.o(i.Ano_Parame_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ano_Parame_Write &rArr; All_PID_Init &rArr; Loc_1level_PID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvr_ParamterSave
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_PID_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Copy_Fc2para
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write_task
</UL>

<P><STRONG><a name="[120]"></a>Parame_Copy_Fc2para</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ano_parameter.o(i.Parame_Copy_Fc2para))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Write
</UL>

<P><STRONG><a name="[11f]"></a>Parame_Copy_Para2fc</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ano_parameter.o(i.Parame_Copy_Para2fc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Parame_Copy_Para2fc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Center_Pos_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parame_Reset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ano_Parame_Read
</UL>

<P><STRONG><a name="[1b7]"></a>ch_watch_dog</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ano_rc.o(i.ch_watch_dog))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_duty_task
</UL>

<P><STRONG><a name="[193]"></a>ledBreath</STRONG> (Thumb, 324 bytes, Stack size 12 bytes, ano_led.o(i.ledBreath))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ledBreath
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task2
</UL>

<P><STRONG><a name="[192]"></a>ledFlash</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ano_led.o(i.ledFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task2
</UL>

<P><STRONG><a name="[191]"></a>ledOnOff</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ano_led.o(i.ledOnOff))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Task2
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledFlash
</UL>

<P><STRONG><a name="[ff]"></a>ANO_OF_Data_Get</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, ano_of_decofusion.o(i.ANO_OF_Data_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ANO_OF_Data_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Data_Prepare_Task
</UL>

<P><STRONG><a name="[fc]"></a>ANO_OF_Decouple</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, ano_of_decofusion.o(i.ANO_OF_Decouple))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OFDF_Task
</UL>

<P><STRONG><a name="[fd]"></a>ANO_OF_Fusion</STRONG> (Thumb, 448 bytes, Stack size 24 bytes, ano_of_decofusion.o(i.ANO_OF_Fusion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ANO_OF_Fusion
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w2h_2d_trans
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h2w_2d_trans
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OF_INS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OFDF_Task
</UL>

<P><STRONG><a name="[100]"></a>OF_INS_Get</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, ano_of_decofusion.o(i.OF_INS_Get))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Data_Prepare_Task
</UL>

<P><STRONG><a name="[102]"></a>OF_INS_Reset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ano_of_decofusion.o(i.OF_INS_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OF_Fusion
</UL>

<P><STRONG><a name="[fb]"></a>OF_State</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ano_of_decofusion.o(i.OF_State))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_OFDF_Task
</UL>

<P><STRONG><a name="[d5]"></a>ANO_CBTracking_Calcu</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, ano_opmv_cbtracking_ctrl.o(i.ANO_CBTracking_Calcu))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Task
</UL>

<P><STRONG><a name="[d4]"></a>ANO_CBTracking_Decoupling</STRONG> (Thumb, 646 bytes, Stack size 0 bytes, ano_opmv_cbtracking_ctrl.o(i.ANO_CBTracking_Decoupling))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_CBTracking_Task
</UL>

<P><STRONG><a name="[f9]"></a>ANO_LTracking_Calcu</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, ano_opmv_linetracking_ctrl.o(i.ANO_LTracking_Calcu))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Task
</UL>

<P><STRONG><a name="[f8]"></a>ANO_LTracking_Decoupling</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, ano_opmv_linetracking_ctrl.o(i.ANO_LTracking_Decoupling))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_LTracking_Task
</UL>

<P><STRONG><a name="[1b0]"></a>PPM_Cal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, drv_rcin.o(i.PPM_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPM_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_watch_dog_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Decode
</UL>

<P><STRONG><a name="[89]"></a>PPM_Decode</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, drv_rcin.o(i.PPM_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPM_Decode &rArr; PPM_Cal
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Cal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcin.o(i.Drv_PpmInit)
</UL>
<P><STRONG><a name="[1b9]"></a>Sbus_Decode</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, drv_rcin.o(i.Sbus_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sbus_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_watch_dog_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>Sbus_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_rcin.o(i.Sbus_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sbus_IRQHandler &rArr; Sbus_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sbus_Decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcin.o(i.Drv_SbusInit)
</UL>
<P><STRONG><a name="[14f]"></a>icm20602_INT_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_icm20602.o(i.icm20602_INT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = icm20602_INT_Config &rArr; icm20602_setIntEnabled &rArr; icm20602_writeBit &rArr; icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_setIntEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Init
</UL>

<P><STRONG><a name="[21b]"></a>icm20602_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_icm20602.o(i.icm20602_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icm20602_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writebyte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
</UL>

<P><STRONG><a name="[14e]"></a>icm20602_readbuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_icm20602.o(i.icm20602_readbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602_Read
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writeBit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Init
</UL>

<P><STRONG><a name="[21a]"></a>icm20602_setIntEnabled</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_icm20602.o(i.icm20602_setIntEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icm20602_setIntEnabled &rArr; icm20602_writeBit &rArr; icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602ReadyPinInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writeBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_INT_Config
</UL>

<P><STRONG><a name="[21c]"></a>icm20602_writeBit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_icm20602.o(i.icm20602_writeBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icm20602_writeBit &rArr; icm20602_readbuf &rArr; Drv_Spi0Receive &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writebyte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_setIntEnabled
</UL>

<P><STRONG><a name="[14d]"></a>icm20602_writebyte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_icm20602.o(i.icm20602_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icm20602_writebyte &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_writeBit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Icm20602Init
</UL>

<P><STRONG><a name="[12f]"></a>ak8975_Trig</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_ak8975.o(i.ak8975_Trig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ak8975_Trig &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
</UL>

<P><STRONG><a name="[12d]"></a>ak8975_enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_ak8975.o(i.ak8975_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ak8975_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_AK8975_Read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ak8975_Trig
</UL>

<P><STRONG><a name="[162]"></a>spl0601_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spl0601_read &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_temp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_raw_pressure
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_get_calib_param
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spl0601Init
</UL>

<P><STRONG><a name="[21e]"></a>spl0601_write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_spl06.o(i.spl0601_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spl0601_write &rArr; Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl06_enable
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Spi0SingleWirteAndRead
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_start_continuous
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_rateset
</UL>

<P><STRONG><a name="[21f]"></a>spl06_enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_spl06.o(i.spl06_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spl06_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0601_read
</UL>

<P><STRONG><a name="[1c5]"></a>UART_Write_D</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, drv_gps.o(i.UART_Write_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Write_D &rArr; Drv_Uart1SendBuf &rArr; Drv_Uart1TxCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart1SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_config
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_baudrate_config
</UL>

<P><STRONG><a name="[1af]"></a>OpenMV_Check_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_openmv.o(i.OpenMV_Check_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Data_Analysis
</UL>

<P><STRONG><a name="[1ae]"></a>OpenMV_Data_Analysis</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, drv_openmv.o(i.OpenMV_Data_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OpenMV_Data_Analysis
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Check_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenMV_Byte_Get
</UL>

<P><STRONG><a name="[172]"></a>Speed_Mode_Switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ano_flightctrl.o(i.Speed_Mode_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flight_Mode_Set
</UL>

<P><STRONG><a name="[1a7]"></a>Mag_Cal_Reset</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ano_magprocess.o(i.Mag_Cal_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[1a6]"></a>Mag_Cal_XY</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ano_magprocess.o(i.Mag_Cal_XY))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[1a8]"></a>Mag_Cal_Z</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ano_magprocess.o(i.Mag_Cal_Z))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mag_Data_Deal_Task
</UL>

<P><STRONG><a name="[17b]"></a>_GPIOIntNumberGet</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gpio.o(i._GPIOIntNumberGet))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntRegister
</UL>

<P><STRONG><a name="[1ba]"></a>ScheduleNextTransmission</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usbbuffer.o(i.ScheduleNextTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScheduleNextTransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufUsed
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBRingBufContigUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferEventCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBBufferWrite
</UL>

<P><STRONG><a name="[90]"></a>CDCTickHandler</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, usbdcdc.o(i.CDCTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CDCTickHandler &rArr; SendBreak
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(i.USBDCDCCompositeInit)
</UL>
<P><STRONG><a name="[ab]"></a>HandleConfigChange</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbdcdc.o(i.HandleConfigChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HandleConfigChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>HandleDevice</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleDevice))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>HandleDisconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbdcdc.o(i.HandleDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HandleDisconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>HandleEP0Data</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEP0Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HandleEP0Data &rArr; USBDCDStallEP0
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>HandleEndpoints</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, usbdcdc.o(i.HandleEndpoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleEndpoints &rArr; SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataToHost
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessDataFromHost
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSerialState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointStatus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStatusClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>HandleRequests</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, usbdcdc.o(i.HandleRequests))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HandleRequests &rArr; USBDCDSendDataEP0 &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDStallEP0
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDRequestDataEP0
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>HandleResume</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleResume))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>HandleSuspend</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbdcdc.o(i.HandleSuspend))
<BR>[Address Reference Count : 1]<UL><LI> usbdcdc.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>SendBreak</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbdcdc.o(i.SendBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRequests
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDCTickHandler
</UL>

<P><STRONG><a name="[17f]"></a>SendSerialState</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, usbdcdc.o(i.SendSerialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SendSerialState &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEndpoints
</UL>

<P><STRONG><a name="[b3]"></a>USBDClearFeature</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbdenum.o(i.USBDClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDClearFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStallClear
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>USBDEP0StateTx</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbdenum.o(i.USBDEP0StateTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDSendDataEP0
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetInterface
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetConfiguration
</UL>

<P><STRONG><a name="[1f4]"></a>USBDEP0StateTxConfig</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, usbdenum.o(i.USBDEP0StateTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataSend
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataPut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDGetDescriptor
</UL>

<P><STRONG><a name="[b8]"></a>USBDGetConfiguration</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbdenum.o(i.USBDGetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBDGetConfiguration &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>USBDGetDescriptor</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, usbdenum.o(i.USBDGetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBDGetDescriptor &rArr; USBDEP0StateTxConfig &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetSize
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTxConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>USBDGetInterface</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbdenum.o(i.USBDGetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBDGetInterface &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>USBDGetStatus</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbdenum.o(i.USBDGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBDGetStatus &rArr; USBDEP0StateTx &rArr; USBEndpointDataPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDEP0StateTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>USBDReadAndDispatchRequest</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usbdenum.o(i.USBDReadAndDispatchRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBDReadAndDispatchRequest &rArr; USBEndpointDataGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDataGet
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceEnumHandler
</UL>

<P><STRONG><a name="[b5]"></a>USBDSetAddress</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbdenum.o(i.USBDSetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBDSetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>USBDSetConfiguration</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBDSetConfiguration &rArr; USBDeviceConfig &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>USBDSetDescriptor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSetDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>USBDSetFeature</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, usbdenum.o(i.USBDSetFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBDSetFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>USBDSetInterface</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, usbdenum.o(i.USBDSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = USBDSetInterface &rArr; USBDeviceConfigAlternate &rArr; USBDCDConfigGetInterfaceEndpoint &rArr; USBDCDConfigGetInterface &rArr; USBDescGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDeviceConfigAlternate
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigGetInterface
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCDConfigDescGetNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>USBDSyncFrame</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbdenum.o(i.USBDSyncFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDSyncFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointStall
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDevEndpointDataAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdenum.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>DMAUSBIntHandler</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, usbdma.o(i.DMAUSBIntHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMAUSBIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9b]"></a>DMAUSBIntStatusClear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBIntStatusClear))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9c]"></a>DMAUSBStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbdma.o(i.DMAUSBStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9f]"></a>iDMAUSBArbSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBArbSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a0]"></a>iDMAUSBChannelAllocate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a8]"></a>iDMAUSBChannelDisable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a7]"></a>iDMAUSBChannelEnable</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a4]"></a>iDMAUSBChannelIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntDisable))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a3]"></a>iDMAUSBChannelIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBChannelIntEnable))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a6]"></a>iDMAUSBChannelRelease</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a1]"></a>iDMAUSBChannelStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbdma.o(i.iDMAUSBChannelStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iDMAUSBChannelStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a2]"></a>iDMAUSBIntStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBIntStatus))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a5]"></a>iDMAUSBTransfer</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usbdma.o(i.iDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iDMAUSBTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelEnable
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelCountSet
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelConfigSet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDMAChannelAddressSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[a9]"></a>iDMAUSBUnitSizeSet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.iDMAUSBUnitSizeSet))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[91]"></a>uDMAUSBArbSizeSet</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBArbSizeSet))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[92]"></a>uDMAUSBChannelAllocate</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBChannelAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBChannelAllocate
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAChannel
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[93]"></a>uDMAUSBChannelDisable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[94]"></a>uDMAUSBChannelEnable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIsEnabled
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAEnable
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[96]"></a>uDMAUSBChannelIntDisable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntDisable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[95]"></a>uDMAUSBChannelIntEnable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelIntEnable))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[97]"></a>uDMAUSBChannelRelease</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usbdma.o(i.uDMAUSBChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uDMAUSBChannelRelease
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMADisable
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[98]"></a>uDMAUSBChannelStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbdma.o(i.uDMAUSBChannelStatus))
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9a]"></a>uDMAUSBIntStatus</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbdma.o(i.uDMAUSBIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uDMAUSBIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelModeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9d]"></a>uDMAUSBTransfer</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, usbdma.o(i.uDMAUSBTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uDMAUSBTransfer &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFIFOAddrGet
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointPacketCountSet
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBEndpointDMAConfigSet
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAUSBChannelEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL>
<P><STRONG><a name="[9e]"></a>uDMAUSBUnitSizeSet</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usbdma.o(i.uDMAUSBUnitSizeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uDMAUSBUnitSizeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbdma.o(i.USBLibDMAInit)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
